// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Cine_Tp.Data;

public partial class CineContext : DbContext
{
    public CineContext(DbContextOptions<CineContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Barrio> Barrios { get; set; }

    public virtual DbSet<Butaca> Butacas { get; set; }

    public virtual DbSet<Cliente> Clientes { get; set; }

    public virtual DbSet<Contacto> Contactos { get; set; }

    public virtual DbSet<DetalleFactura> DetalleFacturas { get; set; }

    public virtual DbSet<EstadosReserva> EstadosReservas { get; set; }

    public virtual DbSet<Factura> Facturas { get; set; }

    public virtual DbSet<Funciones> Funciones { get; set; }

    public virtual DbSet<Genero> Generos { get; set; }

    public virtual DbSet<Localidade> Localidades { get; set; }

    public virtual DbSet<Pelicula> Peliculas { get; set; }

    public virtual DbSet<Provincia> Provincias { get; set; }

    public virtual DbSet<Reserva> Reservas { get; set; }

    public virtual DbSet<Restriccione> Restricciones { get; set; }

    public virtual DbSet<Rol> Rols { get; set; }

    public virtual DbSet<Sala> Salas { get; set; }

    public virtual DbSet<Sexo> Sexos { get; set; }

    public virtual DbSet<Ticket> Tickets { get; set; }

    public virtual DbSet<TiposCompra> TiposCompras { get; set; }

    public virtual DbSet<TiposContacto> TiposContactos { get; set; }

    public virtual DbSet<TiposDocumento> TiposDocumentos { get; set; }

    public virtual DbSet<TiposSala> TiposSalas { get; set; }

    public virtual DbSet<Usuario> Usuarios { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Barrio>(entity =>
        {
            entity.HasKey(e => e.IdBarrio).HasName("PK_BARRIO");

            entity.ToTable("BARRIOS");

            entity.Property(e => e.IdBarrio)
                .ValueGeneratedNever()
                .HasColumnName("ID_BARRIO");
            entity.Property(e => e.IdLocalidad).HasColumnName("ID_LOCALIDAD");
            entity.Property(e => e.NomBarrio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOM_BARRIO");

            entity.HasOne(d => d.IdLocalidadNavigation).WithMany(p => p.Barrios)
                .HasForeignKey(d => d.IdLocalidad)
                .HasConstraintName("FK_LOCALIDAD");
        });

        modelBuilder.Entity<Butaca>(entity =>
        {
            entity.HasKey(e => e.IdButaca).HasName("PK_BUTACA");

            entity.ToTable("BUTACAS");

            entity.Property(e => e.IdButaca)
                .ValueGeneratedNever()
                .HasColumnName("ID_BUTACA");
            entity.Property(e => e.Estado).HasColumnName("estado");
            entity.Property(e => e.Fila)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("FILA");
            entity.Property(e => e.IdSala).HasColumnName("ID_SALA");
            entity.Property(e => e.Numero).HasColumnName("NUMERO");

            entity.HasOne(d => d.Sala).WithMany(p => p.Butacas)
                .HasForeignKey(d => d.IdSala)
                .HasConstraintName("FK_SALA");
        });

        modelBuilder.Entity<Cliente>(entity =>
        {
            entity.HasKey(e => e.IdCliente).HasName("PK_CLIENTE");

            entity.ToTable("CLIENTES");

            entity.Property(e => e.IdCliente)
                .ValueGeneratedNever()
                .HasColumnName("ID_CLIENTE");
            entity.Property(e => e.ApeCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("APE_CLIENTE");
            entity.Property(e => e.Domicilio)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DOMICILIO");
            entity.Property(e => e.FechaNac).HasColumnName("FECHA_NAC");
            entity.Property(e => e.IdBarrio).HasColumnName("ID_BARRIO");
            entity.Property(e => e.IdSexo).HasColumnName("ID_SEXO");
            entity.Property(e => e.IdTipoDoc).HasColumnName("ID_TIPO_DOC");
            entity.Property(e => e.NomCliente)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOM_CLIENTE");
            entity.Property(e => e.NumDoc).HasColumnName("NUM_DOC");

            entity.HasOne(d => d.IdBarrioNavigation).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.IdBarrio)
                .HasConstraintName("FK_BARRIO_CLIENTE");

            entity.HasOne(d => d.IdSexoNavigation).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.IdSexo)
                .HasConstraintName("FK_SEXO");

            entity.HasOne(d => d.IdTipoDocNavigation).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.IdTipoDoc)
                .HasConstraintName("FK_TIPO_DOC");
        });

        modelBuilder.Entity<Contacto>(entity =>
        {
            entity.HasKey(e => e.IdContacto).HasName("PK_CONTACTO");

            entity.ToTable("CONTACTOS");

            entity.Property(e => e.IdContacto)
                .ValueGeneratedNever()
                .HasColumnName("ID_CONTACTO");
            entity.Property(e => e.DetalleContacto)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("DETALLE_CONTACTO");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdTipoContacto).HasColumnName("ID_TIPO_CONTACTO");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.Contactos)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_CLIENTE_CONTACTO");

            entity.HasOne(d => d.IdTipoContactoNavigation).WithMany(p => p.Contactos)
                .HasForeignKey(d => d.IdTipoContacto)
                .HasConstraintName("FK_TIPO_CONTACTO");
        });

        modelBuilder.Entity<DetalleFactura>(entity =>
        {
            entity.HasKey(e => e.IdDetalleFactura).HasName("PK_DETALLE");

            entity.ToTable("DETALLE_FACTURAS");

            entity.Property(e => e.IdDetalleFactura)
                .ValueGeneratedNever()
                .HasColumnName("ID_DETALLE_FACTURA");
            entity.Property(e => e.Cantidad).HasColumnName("CANTIDAD");
            entity.Property(e => e.NumFactura).HasColumnName("NUM_FACTURA");
            entity.Property(e => e.NumTicket).HasColumnName("NUM_TICKET");
            entity.Property(e => e.Precio)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("PRECIO");

            entity.HasOne(d => d.NumFacturaNavigation).WithMany(p => p.DetalleFacturas)
                .HasForeignKey(d => d.NumFactura)
                .HasConstraintName("FK_FACTURAS");

            entity.HasOne(d => d.NumTicketNavigation).WithMany(p => p.DetalleFacturas)
                .HasForeignKey(d => d.NumTicket)
                .HasConstraintName("FK_TICKET");
        });

        modelBuilder.Entity<EstadosReserva>(entity =>
        {
            entity.HasKey(e => e.IdEstadoReserva).HasName("PK_ESTADO_RESERVA");

            entity.ToTable("ESTADOS_RESERVAS");

            entity.Property(e => e.IdEstadoReserva)
                .ValueGeneratedNever()
                .HasColumnName("ID_ESTADO_RESERVA");
            entity.Property(e => e.Estado)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ESTADO");
        });

        modelBuilder.Entity<Factura>(entity =>
        {
            entity.HasKey(e => e.NumFactura).HasName("PK_FACTURA");

            entity.ToTable("FACTURAS");

            entity.Property(e => e.NumFactura)
                .ValueGeneratedNever()
                .HasColumnName("NUM_FACTURA");
            entity.Property(e => e.FechaFactura).HasColumnName("FECHA_FACTURA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdTipoCompra).HasColumnName("ID_TIPO_COMPRA");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.Facturas)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_CLIENTES");

            entity.HasOne(d => d.IdTipoCompraNavigation).WithMany(p => p.Facturas)
                .HasForeignKey(d => d.IdTipoCompra)
                .HasConstraintName("FK_TIPO_COMPRA");
        });

        modelBuilder.Entity<Funciones>(entity =>
        {
            entity.HasKey(e => e.IdFuncion).HasName("PK_FUNCION");

            entity.ToTable("FUNCIONES");

            entity.Property(e => e.IdFuncion)
                .ValueGeneratedNever()
                .HasColumnName("ID_FUNCION");
            entity.Property(e => e.FechaFuncion).HasColumnName("FECHA_FUNCION");
            entity.Property(e => e.HoraFuncion).HasColumnName("HORA_FUNCION");
            entity.Property(e => e.IdPelicula).HasColumnName("ID_PELICULA");
            entity.Property(e => e.IdSala).HasColumnName("ID_SALA");

            entity.HasOne(d => d.Pelicula).WithMany(p => p.Funciones)
                .HasForeignKey(d => d.IdPelicula)
                .HasConstraintName("FK_PELICULA_FUNCION");

            entity.HasOne(d => d.Sala).WithMany(p => p.Funciones)
                .HasForeignKey(d => d.IdSala)
                .HasConstraintName("FK_SALA_FUNCIONES");
        });

        modelBuilder.Entity<Genero>(entity =>
        {
            entity.HasKey(e => e.IdGenero).HasName("PK_GENERO");

            entity.ToTable("GENEROS");

            entity.Property(e => e.IdGenero)
                .ValueGeneratedNever()
                .HasColumnName("ID_GENERO");
            entity.Property(e => e.Genero1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("GENERO");
        });

        modelBuilder.Entity<Localidade>(entity =>
        {
            entity.HasKey(e => e.IdLocalidad).HasName("PK_LOCALIDAD");

            entity.ToTable("LOCALIDADES");

            entity.Property(e => e.IdLocalidad)
                .ValueGeneratedNever()
                .HasColumnName("ID_LOCALIDAD");
            entity.Property(e => e.IdProvincia).HasColumnName("ID_PROVINCIA");
            entity.Property(e => e.NomLocalidad)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOM_LOCALIDAD");

            entity.HasOne(d => d.IdProvinciaNavigation).WithMany(p => p.Localidades)
                .HasForeignKey(d => d.IdProvincia)
                .HasConstraintName("FK_PROVINCIA");
        });

        modelBuilder.Entity<Pelicula>(entity =>
        {
            entity.HasKey(e => e.IdPelicula).HasName("PK_PELICULA");

            entity.ToTable("PELICULAS");

            entity.Property(e => e.IdPelicula)
                .ValueGeneratedNever()
                .HasColumnName("ID_PELICULA");
            entity.Property(e => e.Duracion).HasColumnName("DURACION");
            entity.Property(e => e.FechaBaja).HasColumnName("Fecha_Baja");
            entity.Property(e => e.Precio).HasColumnName("precio");
            entity.Property(e => e.IdGenero).HasColumnName("ID_GENERO");
            entity.Property(e => e.IdRestriccion).HasColumnName("ID_RESTRICCION");
            entity.Property(e => e.Nombre)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("NOMBRE");

            entity.HasOne(d => d.IdGeneroNavigation).WithMany(p => p.Peliculas)
                .HasForeignKey(d => d.IdGenero)
                .HasConstraintName("FK_GENERO");

            entity.HasOne(d => d.IdRestriccionNavigation).WithMany(p => p.Peliculas)
                .HasForeignKey(d => d.IdRestriccion)
                .HasConstraintName("FK_RESTRICCION");
        });

        modelBuilder.Entity<Provincia>(entity =>
        {
            entity.HasKey(e => e.IdProvincia).HasName("PK_ID_PROVINCIA");

            entity.ToTable("PROVINCIAS");

            entity.Property(e => e.IdProvincia)
                .ValueGeneratedNever()
                .HasColumnName("ID_PROVINCIA");
            entity.Property(e => e.NomProvincia)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOM_PROVINCIA");
        });

        modelBuilder.Entity<Reserva>(entity =>
        {
            entity.HasKey(e => e.IdReserva).HasName("PK_RESERVA");

            entity.ToTable("RESERVAS");

            entity.Property(e => e.IdReserva)
                .ValueGeneratedNever()
                .HasColumnName("ID_RESERVA");
            entity.Property(e => e.Fecha).HasColumnName("FECHA");
            entity.Property(e => e.IdCliente).HasColumnName("ID_CLIENTE");
            entity.Property(e => e.IdEstadoReserva).HasColumnName("ID_ESTADO_RESERVA");

            entity.HasOne(d => d.IdClienteNavigation).WithMany(p => p.Reservas)
                .HasForeignKey(d => d.IdCliente)
                .HasConstraintName("FK_CLIENTE");

            entity.HasOne(d => d.IdEstadoReservaNavigation).WithMany(p => p.Reservas)
                .HasForeignKey(d => d.IdEstadoReserva)
                .HasConstraintName("FK_ESTADO_RESERV");
        });

        modelBuilder.Entity<Restriccione>(entity =>
        {
            entity.HasKey(e => e.IdRestriccion).HasName("PK_RESTRICCION");

            entity.ToTable("RESTRICCIONES");

            entity.Property(e => e.IdRestriccion)
                .ValueGeneratedNever()
                .HasColumnName("ID_RESTRICCION");
            entity.Property(e => e.Restriccion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("RESTRICCION");
        });

        modelBuilder.Entity<Rol>(entity =>
        {
            entity.HasKey(e => e.IdRol).HasName("id_rol_pk");

            entity.ToTable("ROL");

            entity.Property(e => e.IdRol).HasColumnName("id_rol");
            entity.Property(e => e.Rol1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("rol");
        });

        modelBuilder.Entity<Sala>(entity =>
        {
            entity.HasKey(e => e.IdSala).HasName("PK_SALA");

            entity.ToTable("SALAS");

            entity.Property(e => e.IdSala)
                .ValueGeneratedNever()
                .HasColumnName("ID_SALA");
            entity.Property(e => e.Capacidad).HasColumnName("CAPACIDAD");
            entity.Property(e => e.IdTipoSala).HasColumnName("ID_TIPO_SALA");
            entity.Property(e => e.NombreSala)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("NOMBRE_SALA");

            entity.HasOne(d => d.IdTipoSalaNavigation).WithMany(p => p.Salas)
                .HasForeignKey(d => d.IdTipoSala)
                .HasConstraintName("FK_TIPO_SALA");
        });

        modelBuilder.Entity<Sexo>(entity =>
        {
            entity.HasKey(e => e.IdSexo).HasName("PK_ID_SEXO");

            entity.ToTable("SEXOS");

            entity.Property(e => e.IdSexo)
                .ValueGeneratedNever()
                .HasColumnName("ID_SEXO");
            entity.Property(e => e.Sexo1)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("SEXO");
        });

        modelBuilder.Entity<Ticket>(entity =>
        {
            entity.HasKey(e => e.NumTicket).HasName("PK_TICKET");

            entity.ToTable("TICKETS");

            entity.Property(e => e.NumTicket)
                .ValueGeneratedNever()
                .HasColumnName("NUM_TICKET");
            entity.Property(e => e.Fecha).HasColumnName("FECHA");
            entity.Property(e => e.IdButaca).HasColumnName("ID_BUTACA");
            entity.Property(e => e.IdFuncion).HasColumnName("ID_FUNCION");
            entity.Property(e => e.IdReserva).HasColumnName("ID_RESERVA");
            entity.Property(e => e.Precio)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("PRECIO");

            entity.HasOne(d => d.Butaca).WithMany(p => p.Tickets)
                .HasForeignKey(d => d.IdButaca)
                .HasConstraintName("FK_BUTACA");

            entity.HasOne(d => d.Funciones).WithMany(p => p.Tickets)
                .HasForeignKey(d => d.IdFuncion)
                .HasConstraintName("FK_FUNCION");

            entity.HasOne(d => d.IdReservaNavigation).WithMany(p => p.Tickets)
                .HasForeignKey(d => d.IdReserva)
                .HasConstraintName("FK_RESERVAS");
        });

        modelBuilder.Entity<TiposCompra>(entity =>
        {
            entity.HasKey(e => e.IdTipoCompra).HasName("PK_TIPO_COMPRA");

            entity.ToTable("TIPOS_COMPRAS");

            entity.Property(e => e.IdTipoCompra)
                .ValueGeneratedNever()
                .HasColumnName("ID_TIPO_COMPRA");
            entity.Property(e => e.TipoCompra)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("TIPO_COMPRA");
        });

        modelBuilder.Entity<TiposContacto>(entity =>
        {
            entity.HasKey(e => e.IdTipoContacto).HasName("PK_TIPO_CONTACTO");

            entity.ToTable("TIPOS_CONTACTOS");

            entity.Property(e => e.IdTipoContacto)
                .ValueGeneratedNever()
                .HasColumnName("ID_TIPO_CONTACTO");
            entity.Property(e => e.TipoContacto)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("TIPO_CONTACTO");
        });

        modelBuilder.Entity<TiposDocumento>(entity =>
        {
            entity.HasKey(e => e.IdTipoDoc).HasName("PK_TIPO_DOC");

            entity.ToTable("TIPOS_DOCUMENTOS");

            entity.Property(e => e.IdTipoDoc)
                .ValueGeneratedNever()
                .HasColumnName("ID_TIPO_DOC");
            entity.Property(e => e.TipoDoc)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_DOC");
        });

        modelBuilder.Entity<TiposSala>(entity =>
        {
            entity.HasKey(e => e.IdTipoSala).HasName("PK_TIPO_SALA");

            entity.ToTable("TIPOS_SALAS");

            entity.Property(e => e.IdTipoSala)
                .ValueGeneratedNever()
                .HasColumnName("ID_TIPO_SALA");
            entity.Property(e => e.TipoSala)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("TIPO_SALA");
        });

        modelBuilder.Entity<Usuario>(entity =>
        {
            entity.HasKey(e => e.UsuarioId).HasName("pk_usuario_id");

            entity.ToTable("USUARIOS");

            entity.Property(e => e.UsuarioId).HasColumnName("usuario_id");
            entity.Property(e => e.Apellido)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("apellido");
            entity.Property(e => e.Contraseña)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("contraseña");
            entity.Property(e => e.IdRol).HasColumnName("id_rol");
            entity.Property(e => e.Nombre)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.NombreUsuario)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nombre_usuario");

            entity.HasOne(d => d.IdRolNavigation).WithMany(p => p.Usuarios)
                .HasForeignKey(d => d.IdRol)
                .HasConstraintName("fk_id_rol");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}